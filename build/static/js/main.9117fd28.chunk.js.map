{"version":3,"sources":["Todolist/Todoing.js","Todolist/Todoinput.js","Todolist/Finished.js","Todolist/Todolist.js","index.js"],"names":["Todoing","this","props","todo","length","className","map","item","idx","key","id","type","onClick","e","complete","delTodo","Component","Todoinput","handleInput","keyCode","addTodo","target","value","handleChange","setState","name","state","n1","n2","onChange","onKeyDown","Finished","finished","checked","doing","Todolist","addItem","msg","delitem","a","splice","delitemed","comdix","doingdix","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9117fd28.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nexport default class Todoing extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>正在进行：{this.props.todo.length}</h1>\r\n                <ul className=\"list\">\r\n                    {\r\n                        this.props.todo.map(\r\n                            (item,idx)=><li key={idx}>{item}\r\n                        <input id='c' type='checkbox' onClick={(e)=>{this.props.complete(idx,e)}}/>\r\n                        <button id='d' onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n//子组件---->父组件传递数据，调用子组件时往子组件传递一个函数\r\n// 子组件通过props调用该函数\r\n// 受控组件和非受控组件\r\n// 非受控组件\r\n// 代码简单、比较适用于一次性获取表单的值\r\n// export default class Todoinput extends Component {\r\n//     componentDidMount(){\r\n//         console.log(this.inp.value);\r\n//         // console.log(this);\r\n//     }\r\n//     search = ()=>{\r\n//         console.log(this.inp.value);\r\n//     }\r\n//     render(){\r\n//         return (<div>\r\n//                     <input ref={inp=>this.inp = inp} type=\"text\"/>\r\n//                     <button onClick={this.search}>查询</button>\r\n//                 </div>)\r\n//     }\r\n// }\r\n// 受控组件：value值被react的状态控制\r\n// 实时获取或处理输入的内容\r\nexport default class Todoinput extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            n1: '',\r\n            n2: ''\r\n        }\r\n    }\r\n    handleInput = (e)=>{\r\n        if(e.keyCode === 13){\r\n            this.props.addTodo(e.target.value);\r\n        }\r\n    }\r\n    handleChange = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value\r\n        })\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                {/* <label style={{\r\n                    color:this.state.n1+this.state.n2>10?'red':'green',\r\n                    fontSize:50\r\n                    }} s\r\n                    htmlFor=\"inp\">输入：</label> */}\r\n                <div id='a'>Todolist：</div>\r\n                <input id=\"b\" name=\"n1\" onChange={this.handleChange} value={this.state.n1} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                {/* +\r\n                <input name=\"n2\" onChange={this.handleChange} value={this.state.n2} onKeyDown={(e)=>this.handleInput(e)} type=\"text\"/>\r\n                <p dangerouslySetInnerHTML={{__html:this.state.n1+this.state.n2}}></p>\r\n                <button>查询</button> */}\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nexport default class Finished extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h1>已经完成：{this.props.finished.length}</h1>\r\n                <ul className=\"list\">\r\n                    {\r\n                        this.props.finished.map(\r\n                            (item,idx)=><li key={idx}>{item}\r\n                        <input id='c' type='checkbox' checked=\"checked\" onClick={(e)=>this.props.doing(idx,e)}/>\r\n                        <button id='d' onClick={()=>{this.props.delTodo(idx)}}>删除</button></li>)\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}","import React, { Component } from 'react';\r\nimport Todoing from './Todoing';\r\nimport Todoinput from './Todoinput';\r\nimport Finished from './Finished';\r\n\r\nexport default class Todolist extends Component {\r\n    constructor(){\r\n        super();\r\n        this.state = {\r\n            todo: ['打王者','吃饭'],\r\n            finished: ['学习']\r\n        }\r\n        // var arr = [1,2,{a:100}];// 深拷贝// var b = JSON.parse(JSON.stringify(arr));// b[2].a = 200;// console.log(arr);\r\n        // 对象的拷贝//var a= {a:100,b:200};// var o = Object.assign({},a);// console.log(o===a);// console.log(o);\r\n        // Object.keys返回由属性名组成的一个数组//Object.keys(a).forEach((item)=>{//console.log(item);//console.log(a[item]);\r\n        //})// 尽量不用for in// for(var item in a){//     console.log(a);// }\r\n    }\r\n    //添加\r\n    addItem = (msg)=>{\r\n        // this.state.todo.push(msg)\r\n        // console.log(this.state.todo)\r\n        this.setState({\r\n            todo: [...this.state.todo,msg]\r\n        })  \r\n    }\r\n    //删除未完成\r\n    delitem = (a)=>{\r\n        // this.state.todo.splice(a,1); //不要写\r\n        // 深拷贝\\浅拷贝\r\n        // 状态（state）：\r\n        // 1、不要直接改变、处理状态\r\n        var todo= [...this.state.todo];\r\n        todo.splice(a,1);\r\n        // 2、setState是异步的\r\n        this.setState(\r\n            {todo:todo}\r\n        )\r\n    }\r\n    //删除已完成\r\n    delitemed = (a)=>{\r\n        var finished =[...this.state.finished];\r\n        finished.splice(a,1);\r\n        this.setState({\r\n            finished:finished\r\n        })\r\n    }\r\n    //上切到下\r\n    comdix = (a,e)=>{\r\n        var todo =[...this.state.todo];\r\n        var finished=[...this.state.finished,this.state.todo[a]];\r\n        todo.splice(a,1);\r\n        this.setState({\r\n            todo:todo,\r\n            finished:finished\r\n        })\r\n        e.target.checked = false;\r\n    }\r\n    //下切到上\r\n    doingdix = (a)=>{\r\n        var todo=[...this.state.todo,this.state.finished[a]];\r\n        var finished =[...this.state.finished];\r\n        finished.splice(a,1);\r\n        this.setState({\r\n            todo:todo,\r\n            finished:finished   \r\n        })\r\n    }\r\n    //存储到本地\r\n    componentWillMount(){\r\n        var todo = JSON.parse(localStorage.getItem('todo'));\r\n        var finished = JSON.parse(localStorage.getItem('finished'));\r\n        if(todo){\r\n            this.setState({\r\n                todo: [...todo]\r\n            });\r\n        }\r\n        if(finished){\r\n            this.setState({\r\n                finished: [...finished]\r\n            });\r\n        }\r\n    }\r\n    //本地存储\r\n    componentDidUpdate(){\r\n        localStorage.setItem(\"todo\",JSON.stringify(this.state.todo));\r\n        localStorage.setItem(\"finished\",JSON.stringify(this.state.finished));\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Todoinput addTodo={this.addItem}/>\r\n                <Todoing todo={this.state.todo} delTodo={this.delitem}  complete={this.comdix}/>\r\n                <Finished doing={this.doingdix} delTodo={this.delitemed} finished={this.state.finished}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Todolist from './Todolist/Todolist';\n// import ShowTime from './ShowTime';\n//import Requset from './Request';\n//import Parent from './Context/Parent';\n//import Hoc from './Hoc/Hoc';\n// 组件交互\n// 父组件--->子组件：调用时在子组件上添加属性\n// 在子组件中通过props获取数据\n// let {Provider,Comsumer} = React.createContext();\n//import {con} from './Context/Context'\n//import ParentPortal from './Portal/ParentPortal';\n//import App from './App';\n//let color = 'red';\n\nReactDOM.render(\n    <Todolist/>,\n    document.getElementById('root'));\n// ReactDOM.render(\n//     <con.Provider value={color}>\n//         <ParentPortal/>\n//     </con.Provider>,\n//     document.getElementById('root'));\n\n\n\n\n// 函数定义组件（无生命周期函数）\n// 当只是渲染结构时\n// function Todo(props){\n//     return (\n//         <div>\n//             {/* 条件渲染 */}\n//             {props.list.length>=6?<h1>todo</h1>:''}\n//             {props.list.length>=5 && <h1>todo</h1>}\n//             <ul>\n//                 {/* 循环渲染 */}\n//                 {\n//                     props.list.map(\n//                         (item,index)=> index%2 === 0&&<li key={item}>{item}</li>\n//                     )\n//                 }\n//             </ul>\n//         </div>\n//     )\n// }\n// var item = [1,2,3,4,5];\n// ReactDOM.render(<Todo list={item}/>,document.getElementById('root'));\n\n\n\n\n\n// react元素创建后不可改变\n// function tick(){\n//     var e = <div>\n//                 <p>当前时间</p>\n//                 <p>当前时间</p>\n//                 <h1>{new Date().toLocaleString()}</h1>;\n//             </div>\n//     ReactDOM.render(e,document.getElementById('root'));\n// }\n// tick();\n// setInterval(tick,1000);\n\n// jsx表达式会被react转成一个对象，类似下面声明的obj对象\n// var ele = React.createElement(\n//     'div',\n//     {'id':'box'},\n//     'hello',\n//     React.createElement(\n//         'h1',\n//         {'id':'h'},\n//         'react'\n//     )\n// );\n// var obj = {\n//     type: 'div',\n//     props: {\n//         id: 'box',\n//         class: 'box',\n//         children: ['hello',{\n//             type: 'h1',\n//             props: {\n//                 id: 'h',\n//                 class: 'h',\n//                 children: ['react']\n//             }\n//         }]\n//     }\n// }\n\n// // 自己声明render函数，实现页面渲染\n// function render(obj,container){\n//     var {type,props} = obj;\n//     // 文档碎片\n//     var fr = document.createDocumentFragment();\n\n//     var ele = document.createElement(type);\n//     for(var item in props){\n//         if(item === 'class'){\n//             ele.className = props[item];\n//         }else if(item === 'children'){\n//             for(var i=0;i<props[item].length;i++){\n//                 if(typeof props[item][i] === 'object'){\n//                     render(props[item][i],ele);\n//                 }else{\n//                     var txt = document.createTextNode(props[item][i]);\n//                     ele.appendChild(txt);\n//                 }\n//             }\n//         }else{\n//             ele[item] = props[item];\n//         }\n//     }\n//     fr.appendChild(ele);\n//     container.appendChild(fr);\n// }\n// render(obj,document.getElementById('root'));\n\n// 注意以下性能问题及优化方法\n\n// 加载html文件、浏览器解析html生成DOM树\n// link加载css文件、解析css规则、和DOM树结合生成render tree、浏览器渲染引擎渲染render tree\n\n// 页面回流（重排）：内容改变、大小改变、结构改变\n// 页面重绘：把字体颜色、背景颜色等样式改变\n\n// 1、node.offsetLeft、node.offsetWidth等慎用\n// var root = document.getElementById('root');\n// var width = root.offsetWidth;\n// setInterval(function(){\n//     width += 1\n//     root.style.width = width + 'px';\n// },100)\n\n// display、width、height、font-size等会引起页面回流\n// document.body.style.width = '100px';\n// document.body.style.height = '100px';\n// 2、声明一个css的一个类\n// .change{\n//     width: 100px;\n//     height: 100px;\n// }\n// document.body.className = 'change';\n\n// 3、对节点的操作先用变量代替\n// console.time('a');\n// var str = '';\n// for(var i=0;i<1000;i++){\n//     str += '<li>'+i+'</li>';\n// }\n// document.body.innerHTML = str;\n// console.timeEnd('a');\n// 4、文档碎片的概念"],"sourceRoot":""}